//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiteNetworkingGenerated
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using UnityEngine;
    using LiteNetworking;
    using System.Runtime.InteropServices;


    public sealed class pkt_SpawnEntityPacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(SpawnEntityPacket pkt, MemoryStream m)
        {
            byte[] entityId = Data_serializers_const.ser_Int32.Serialize(pkt.entityId);
            m.Write(entityId, 0, entityId.Length);
            byte[] prefabId = Data_serializers_const.ser_Int32.Serialize(pkt.prefabId);
            m.Write(prefabId, 0, prefabId.Length);
            byte[] authority = Data_serializers_const.ser_Int32.Serialize(pkt.authority);
            m.Write(authority, 0, authority.Length);
            byte[] position = Data_serializers_const.ser_Vector3.Serialize(pkt.position);
            m.Write(position, 0, position.Length);
        }

        public void _Deserialize(SpawnEntityPacket pkt, MemoryStream m)
        {
            pkt.entityId = Data_serializers_const.ser_Int32.Deserialize(m);
            pkt.prefabId = Data_serializers_const.ser_Int32.Deserialize(m);
            pkt.authority = Data_serializers_const.ser_Int32.Deserialize(m);
            pkt.position = Data_serializers_const.ser_Vector3.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_SpawnEntityPacket, m);
            ConstRefs.pkt_SpawnEntityPacket.Execute();
        }
    }

    public sealed class pkt_RemoveEntity_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(RemoveEntity pkt, MemoryStream m)
        {
            byte[] entityId = Data_serializers_const.ser_Int32.Serialize(pkt.entityId);
            m.Write(entityId, 0, entityId.Length);
        }

        public void _Deserialize(RemoveEntity pkt, MemoryStream m)
        {
            pkt.entityId = Data_serializers_const.ser_Int32.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_RemoveEntity, m);
            ConstRefs.pkt_RemoveEntity.Execute();
        }
    }

    public sealed class pkt_SyncTransformPacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(SyncTransformPacket pkt, MemoryStream m)
        {
            byte[] t = Data_serializers_const.ser_NetworkedEntity.Serialize(pkt.t);
            m.Write(t, 0, t.Length);
            byte[] position = Data_serializers_const.ser_Vector3.Serialize(pkt.position);
            m.Write(position, 0, position.Length);
            byte[] euler = Data_serializers_const.ser_Vector3.Serialize(pkt.euler);
            m.Write(euler, 0, euler.Length);
            byte[] scale = Data_serializers_const.ser_Vector3.Serialize(pkt.scale);
            m.Write(scale, 0, scale.Length);
        }

        public void _Deserialize(SyncTransformPacket pkt, MemoryStream m)
        {
            pkt.t = Data_serializers_const.ser_NetworkedEntity.Deserialize(m);
            pkt.position = Data_serializers_const.ser_Vector3.Deserialize(m);
            pkt.euler = Data_serializers_const.ser_Vector3.Deserialize(m);
            pkt.scale = Data_serializers_const.ser_Vector3.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_SyncTransformPacket, m);
            ConstRefs.pkt_SyncTransformPacket.Execute();
        }
    }

    public sealed class pkt_RequestChunkPacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(RequestChunkPacket pkt, MemoryStream m)
        {
            byte[] sceneId = Data_serializers_const.ser_Int32.Serialize(pkt.sceneId);
            m.Write(sceneId, 0, sceneId.Length);
        }

        public void _Deserialize(RequestChunkPacket pkt, MemoryStream m)
        {
            pkt.sceneId = Data_serializers_const.ser_Int32.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_RequestChunkPacket, m);
            ConstRefs.pkt_RequestChunkPacket.Execute();
        }
    }

    public sealed class pkt_OnSceneChangedPacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(OnSceneChangedPacket pkt, MemoryStream m)
        {
            byte[] sceneId = Data_serializers_const.ser_Int32.Serialize(pkt.sceneId);
            m.Write(sceneId, 0, sceneId.Length);
            byte[] offmeshLinkName = Data_serializers_const.ser_String.Serialize(pkt.offmeshLinkName);
            m.Write(offmeshLinkName, 0, offmeshLinkName.Length);
        }

        public void _Deserialize(OnSceneChangedPacket pkt, MemoryStream m)
        {
            pkt.sceneId = Data_serializers_const.ser_Int32.Deserialize(m);
            pkt.offmeshLinkName = Data_serializers_const.ser_String.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_OnSceneChangedPacket, m);
            ConstRefs.pkt_OnSceneChangedPacket.Execute();
        }
    }

    public sealed class pkt_OnSceneChangedClient_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(OnSceneChangedClient pkt, MemoryStream m)
        {
            m.WriteByte(((byte)(pkt.playersInScene.Length)));
            int i_playersInScene = 0;
            for (i_playersInScene = 0; (i_playersInScene < pkt.playersInScene.Length); i_playersInScene = (i_playersInScene + 1))
            {
                byte[] byteArr = Data_serializers_const.ser_Int32.Serialize(pkt.playersInScene[i_playersInScene]);
                m.Write(byteArr, 0, byteArr.Length);
            }
            m.WriteByte(((byte)(pkt.playerPositions.Length)));
            int i_playerPositions = 0;
            for (i_playerPositions = 0; (i_playerPositions < pkt.playerPositions.Length); i_playerPositions = (i_playerPositions + 1))
            {
                byte[] byteArr = Data_serializers_const.ser_Vector3.Serialize(pkt.playerPositions[i_playerPositions]);
                m.Write(byteArr, 0, byteArr.Length);
            }
        }

        public void _Deserialize(OnSceneChangedClient pkt, MemoryStream m)
        {
            int length_playersInScene = m.ReadByte();
            pkt.playersInScene = new Int32[length_playersInScene];
            int i_playersInScene = 0;
            for (i_playersInScene = 0; (i_playersInScene < length_playersInScene); i_playersInScene = (i_playersInScene + 1))
            {
                pkt.playersInScene[i_playersInScene] = Data_serializers_const.ser_Int32.Deserialize(m);
            }
            int length_playerPositions = m.ReadByte();
            pkt.playerPositions = new Vector3[length_playerPositions];
            int i_playerPositions = 0;
            for (i_playerPositions = 0; (i_playerPositions < length_playerPositions); i_playerPositions = (i_playerPositions + 1))
            {
                pkt.playerPositions[i_playerPositions] = Data_serializers_const.ser_Vector3.Deserialize(m);
            }
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_OnSceneChangedClient, m);
            ConstRefs.pkt_OnSceneChangedClient.Execute();
        }
    }

    public sealed class pkt_LobbyHostIntroductionPacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(LobbyHostIntroductionPacket pkt, MemoryStream m)
        {
            byte[] myPlayerId = Data_serializers_const.ser_Int32.Serialize(pkt.myPlayerId);
            m.Write(myPlayerId, 0, myPlayerId.Length);
            m.WriteByte(((byte)(pkt.activePlayerIds.Length)));
            int i_activePlayerIds = 0;
            for (i_activePlayerIds = 0; (i_activePlayerIds < pkt.activePlayerIds.Length); i_activePlayerIds = (i_activePlayerIds + 1))
            {
                byte[] byteArr = Data_serializers_const.ser_Int32.Serialize(pkt.activePlayerIds[i_activePlayerIds]);
                m.Write(byteArr, 0, byteArr.Length);
            }
        }

        public void _Deserialize(LobbyHostIntroductionPacket pkt, MemoryStream m)
        {
            pkt.myPlayerId = Data_serializers_const.ser_Int32.Deserialize(m);
            int length_activePlayerIds = m.ReadByte();
            pkt.activePlayerIds = new Int32[length_activePlayerIds];
            int i_activePlayerIds = 0;
            for (i_activePlayerIds = 0; (i_activePlayerIds < length_activePlayerIds); i_activePlayerIds = (i_activePlayerIds + 1))
            {
                pkt.activePlayerIds[i_activePlayerIds] = Data_serializers_const.ser_Int32.Deserialize(m);
            }
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_LobbyHostIntroductionPacket, m);
            ConstRefs.pkt_LobbyHostIntroductionPacket.Execute();
        }
    }

    public sealed class pkt_LobbyNewPlayerPacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(LobbyNewPlayerPacket pkt, MemoryStream m)
        {
            byte[] newPlayerId = Data_serializers_const.ser_Int32.Serialize(pkt.newPlayerId);
            m.Write(newPlayerId, 0, newPlayerId.Length);
        }

        public void _Deserialize(LobbyNewPlayerPacket pkt, MemoryStream m)
        {
            pkt.newPlayerId = Data_serializers_const.ser_Int32.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_LobbyNewPlayerPacket, m);
            ConstRefs.pkt_LobbyNewPlayerPacket.Execute();
        }
    }

    public sealed class pkt_LobbyGoodbyePacket_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(LobbyGoodbyePacket pkt, MemoryStream m)
        {
        }

        public void _Deserialize(LobbyGoodbyePacket pkt, MemoryStream m)
        {
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_LobbyGoodbyePacket, m);
            ConstRefs.pkt_LobbyGoodbyePacket.Execute();
        }
    }

    public sealed class pkt_ThirdPersonPeriodicUpdate_autogen : LiteNetworking.M_LitePacketInternalMirror
    {

        public void _Serialize(ThirdPersonPeriodicUpdate pkt, MemoryStream m)
        {
            byte[] thisEntity = Data_serializers_const.ser_NetworkedEntity.Serialize(pkt.thisEntity);
            m.Write(thisEntity, 0, thisEntity.Length);
            byte[] m_Move = Data_serializers_const.ser_Vector3.Serialize(pkt.m_Move);
            m.Write(m_Move, 0, m_Move.Length);
            byte[] position = Data_serializers_const.ser_Vector3.Serialize(pkt.position);
            m.Write(position, 0, position.Length);
            byte[] crouch = Data_serializers_const.ser_Boolean.Serialize(pkt.crouch);
            m.Write(crouch, 0, crouch.Length);
            byte[] m_Jump = Data_serializers_const.ser_Boolean.Serialize(pkt.m_Jump);
            m.Write(m_Jump, 0, m_Jump.Length);
        }

        public void _Deserialize(ThirdPersonPeriodicUpdate pkt, MemoryStream m)
        {
            pkt.thisEntity = Data_serializers_const.ser_NetworkedEntity.Deserialize(m);
            pkt.m_Move = Data_serializers_const.ser_Vector3.Deserialize(m);
            pkt.position = Data_serializers_const.ser_Vector3.Deserialize(m);
            pkt.crouch = Data_serializers_const.ser_Boolean.Deserialize(m);
            pkt.m_Jump = Data_serializers_const.ser_Boolean.Deserialize(m);
        }

        public override void Fire(MemoryStream m)
        {
            this._Deserialize(ConstRefs.pkt_ThirdPersonPeriodicUpdate, m);
            ConstRefs.pkt_ThirdPersonPeriodicUpdate.Execute();
        }
    }

    public class ConstRefs
    {

        public static SpawnEntityPacket pkt_SpawnEntityPacket = new SpawnEntityPacket();

        public static pkt_SpawnEntityPacket_autogen mirror_SpawnEntityPacket = new pkt_SpawnEntityPacket_autogen();

        public static RemoveEntity pkt_RemoveEntity = new RemoveEntity();

        public static pkt_RemoveEntity_autogen mirror_RemoveEntity = new pkt_RemoveEntity_autogen();

        public static SyncTransformPacket pkt_SyncTransformPacket = new SyncTransformPacket();

        public static pkt_SyncTransformPacket_autogen mirror_SyncTransformPacket = new pkt_SyncTransformPacket_autogen();

        public static RequestChunkPacket pkt_RequestChunkPacket = new RequestChunkPacket();

        public static pkt_RequestChunkPacket_autogen mirror_RequestChunkPacket = new pkt_RequestChunkPacket_autogen();

        public static OnSceneChangedPacket pkt_OnSceneChangedPacket = new OnSceneChangedPacket();

        public static pkt_OnSceneChangedPacket_autogen mirror_OnSceneChangedPacket = new pkt_OnSceneChangedPacket_autogen();

        public static OnSceneChangedClient pkt_OnSceneChangedClient = new OnSceneChangedClient();

        public static pkt_OnSceneChangedClient_autogen mirror_OnSceneChangedClient = new pkt_OnSceneChangedClient_autogen();

        public static LobbyHostIntroductionPacket pkt_LobbyHostIntroductionPacket = new LobbyHostIntroductionPacket();

        public static pkt_LobbyHostIntroductionPacket_autogen mirror_LobbyHostIntroductionPacket = new pkt_LobbyHostIntroductionPacket_autogen();

        public static LobbyNewPlayerPacket pkt_LobbyNewPlayerPacket = new LobbyNewPlayerPacket();

        public static pkt_LobbyNewPlayerPacket_autogen mirror_LobbyNewPlayerPacket = new pkt_LobbyNewPlayerPacket_autogen();

        public static LobbyGoodbyePacket pkt_LobbyGoodbyePacket = new LobbyGoodbyePacket();

        public static pkt_LobbyGoodbyePacket_autogen mirror_LobbyGoodbyePacket = new pkt_LobbyGoodbyePacket_autogen();

        public static ThirdPersonPeriodicUpdate pkt_ThirdPersonPeriodicUpdate = new ThirdPersonPeriodicUpdate();

        public static pkt_ThirdPersonPeriodicUpdate_autogen mirror_ThirdPersonPeriodicUpdate = new pkt_ThirdPersonPeriodicUpdate_autogen();
    }

    public class PacketSender
    {

        public static void SendSpawnEntityPacket(SpawnEntityPacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(0);
            ConstRefs.mirror_SpawnEntityPacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendRemoveEntity(RemoveEntity pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(1);
            ConstRefs.mirror_RemoveEntity._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendSyncTransformPacket(SyncTransformPacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(2);
            ConstRefs.mirror_SyncTransformPacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendRequestChunkPacket(RequestChunkPacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(3);
            ConstRefs.mirror_RequestChunkPacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendOnSceneChangedPacket(OnSceneChangedPacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(4);
            ConstRefs.mirror_OnSceneChangedPacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendOnSceneChangedClient(OnSceneChangedClient pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(5);
            ConstRefs.mirror_OnSceneChangedClient._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendLobbyHostIntroductionPacket(LobbyHostIntroductionPacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(6);
            ConstRefs.mirror_LobbyHostIntroductionPacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendLobbyNewPlayerPacket(LobbyNewPlayerPacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(7);
            ConstRefs.mirror_LobbyNewPlayerPacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendLobbyGoodbyePacket(LobbyGoodbyePacket pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(8);
            ConstRefs.mirror_LobbyGoodbyePacket._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }

        public static void SendThirdPersonPeriodicUpdate(ThirdPersonPeriodicUpdate pkt, [Optional()] [DefaultParameterValue(-1)] int connectionId)
        {
            MemoryStream m = new MemoryStream();
            m.WriteByte(9);
            ConstRefs.mirror_ThirdPersonPeriodicUpdate._Serialize(pkt, m);
            Networking.TransmitPacket(m, connectionId);
        }
    }

    public class PacketReader
    {

        static List<LiteNetworking.M_LitePacketInternalMirror> mirrors = new List<LiteNetworking.M_LitePacketInternalMirror>();

        static PacketReader()
        {
            mirrors.Add(ConstRefs.mirror_SpawnEntityPacket);
            mirrors.Add(ConstRefs.mirror_RemoveEntity);
            mirrors.Add(ConstRefs.mirror_SyncTransformPacket);
            mirrors.Add(ConstRefs.mirror_RequestChunkPacket);
            mirrors.Add(ConstRefs.mirror_OnSceneChangedPacket);
            mirrors.Add(ConstRefs.mirror_OnSceneChangedClient);
            mirrors.Add(ConstRefs.mirror_LobbyHostIntroductionPacket);
            mirrors.Add(ConstRefs.mirror_LobbyNewPlayerPacket);
            mirrors.Add(ConstRefs.mirror_LobbyGoodbyePacket);
            mirrors.Add(ConstRefs.mirror_ThirdPersonPeriodicUpdate);
        }

        public static void ReadPacket(MemoryStream m)
        {
            int id = m.ReadByte();
            mirrors[id].Fire(m);
        }
    }
}
